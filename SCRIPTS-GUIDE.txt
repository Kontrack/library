================================================================================
                     관리 스크립트 사용 가이드
================================================================================

📁 프로젝트: Library Management System
🔗 GitHub: https://github.com/Kontrack/library

================================================================================
1. 스크립트 목록
================================================================================

Linux/Mac (.sh)              Windows (.bat)           설명
────────────────────────────────────────────────────────────────────────────
start.sh                     start.bat                시스템 시작
stop.sh                      stop.bat                 시스템 중지
restart.sh                   restart.bat              시스템 재시작
rebuild.sh                   rebuild.bat              Docker 이미지 재빌드
update.sh                    update.bat               Git pull + 재빌드
health.sh                    health.bat               상태 확인
logs.sh                      logs.bat                 로그 보기
deploy.sh                    deploy.bat               배포 (대화형)
────────────────────────────────────────────────────────────────────────────


================================================================================
2. 설치 및 준비 (최초 1회)
================================================================================

Linux/Mac:
  # 실행 권한 부여
  chmod +x *.sh
  
  # 또는 자동 설정 스크립트 실행
  chmod +x setup-permissions.sh
  ./setup-permissions.sh

Windows:
  # 별도 설정 불필요, .bat 파일 더블클릭으로 실행


================================================================================
3. 스크립트 상세 설명
================================================================================

┌──────────────────────────────────────────────────────────────────────────┐
│ start.sh / start.bat                                                     │
└──────────────────────────────────────────────────────────────────────────┘
  용도: Docker 컨테이너 시작
  
  실행:
    ./start.sh        # Linux/Mac
    start.bat         # Windows (더블클릭)
  
  동작:
    1. docker-compose up -d 실행
    2. 컨테이너 상태 확인
    3. 접속 URL 표시


┌──────────────────────────────────────────────────────────────────────────┐
│ stop.sh / stop.bat                                                       │
└──────────────────────────────────────────────────────────────────────────┘
  용도: Docker 컨테이너 중지
  
  실행:
    ./stop.sh         # Linux/Mac
    stop.bat          # Windows
  
  동작:
    1. docker-compose down 실행
    2. 모든 컨테이너 중지 및 제거
    3. 네트워크 제거


┌──────────────────────────────────────────────────────────────────────────┐
│ restart.sh / restart.bat                                                 │
└──────────────────────────────────────────────────────────────────────────┘
  용도: Docker 컨테이너 재시작
  
  실행:
    ./restart.sh      # Linux/Mac
    restart.bat       # Windows
  
  동작:
    1. docker-compose down (중지)
    2. docker-compose up -d (시작)
    3. 상태 확인
  
  사용 시기:
    - 설정 파일 변경 후
    - 메모리 초기화 필요 시


┌──────────────────────────────────────────────────────────────────────────┐
│ rebuild.sh / rebuild.bat                                                 │
└──────────────────────────────────────────────────────────────────────────┘
  용도: Docker 이미지 재빌드 (캐시 없이)
  
  실행:
    ./rebuild.sh      # Linux/Mac
    rebuild.bat       # Windows
  
  동작:
    1. docker-compose down
    2. docker-compose build --no-cache
    3. docker-compose up -d
  
  사용 시기:
    - Dockerfile 변경 후
    - 패키지 업데이트 후
    - 완전 초기화 필요 시


┌──────────────────────────────────────────────────────────────────────────┐
│ update.sh / update.bat                                                   │
└──────────────────────────────────────────────────────────────────────────┘
  용도: GitHub에서 최신 코드 가져오기 + 재배포
  
  실행:
    ./update.sh       # Linux/Mac
    update.bat        # Windows
  
  동작:
    1. git status (현재 상태 확인)
    2. git pull git@github.com:Kontrack/library.git main
    3. docker-compose down
    4. docker-compose build
    5. docker-compose up -d
  
  주의:
    - SSH 키가 설정되어 있어야 함
    - 로컬 변경사항이 있으면 충돌 가능


┌──────────────────────────────────────────────────────────────────────────┐
│ health.sh / health.bat                                                   │
└──────────────────────────────────────────────────────────────────────────┘
  용도: 시스템 상태 종합 확인
  
  실행:
    ./health.sh       # Linux/Mac
    health.bat        # Windows
  
  확인 항목:
    ✓ Docker 컨테이너 상태
    ✓ MySQL 실행 및 응답 상태
    ✓ Nginx 실행 및 HTTP 응답
    ✓ Docker 볼륨 정보
    ✓ 리소스 사용량 (CPU, 메모리)
  
  출력 예시:
    ✅ MySQL 실행 중 (포트 3307)
    ✅ MySQL 응답 정상
    ✅ Nginx 실행 중 (포트 8080)
    ✅ HTTP 응답 정상 (200 OK)


┌──────────────────────────────────────────────────────────────────────────┐
│ logs.sh / logs.bat                                                       │
└──────────────────────────────────────────────────────────────────────────┘
  용도: Docker 컨테이너 로그 확인
  
  실행:
    ./logs.sh         # Linux/Mac
    logs.bat          # Windows
  
  대화형 메뉴:
    1) 전체 로그 (모든 컨테이너)
    2) Nginx 로그
    3) MySQL 로그
    4) 실시간 로그 (tail -f)
    5) 최근 50줄만 보기
  
  수동 실행:
    docker-compose logs library-nginx
    docker-compose logs library-mysql
    docker-compose logs -f  # 실시간


┌──────────────────────────────────────────────────────────────────────────┐
│ deploy.sh / deploy.bat                                                   │
└──────────────────────────────────────────────────────────────────────────┘
  용도: 대화형 배포 스크립트
  
  실행:
    ./deploy.sh       # Linux/Mac
    deploy.bat        # Windows
  
  메뉴:
    1) 독립 Docker 실행 (포트 8080)
    2) MySQL만 실행 (deploy.sh only)
    3) 전체 중지 (deploy.bat only)


================================================================================
4. 일반적인 워크플로우
================================================================================

┌──────────────────────────────────────────────────────────────────────────┐
│ 최초 배포                                                                 │
└──────────────────────────────────────────────────────────────────────────┘
  1. Git 클론
     git clone git@github.com:Kontrack/library.git
     cd library

  2. 실행 권한 부여 (Linux/Mac만)
     chmod +x *.sh

  3. 시작
     ./start.sh        # Linux/Mac
     start.bat         # Windows


┌──────────────────────────────────────────────────────────────────────────┐
│ 일상적인 사용                                                             │
└──────────────────────────────────────────────────────────────────────────┘
  시작:      ./start.sh
  중지:      ./stop.sh
  상태확인:  ./health.sh
  로그보기:  ./logs.sh


┌──────────────────────────────────────────────────────────────────────────┐
│ 코드 업데이트 후                                                          │
└──────────────────────────────────────────────────────────────────────────┘
  방법 1 (자동):
    ./update.sh

  방법 2 (수동):
    git pull
    ./restart.sh


┌──────────────────────────────────────────────────────────────────────────┐
│ 문제 발생 시                                                              │
└──────────────────────────────────────────────────────────────────────────┘
  1. 상태 확인
     ./health.sh

  2. 로그 확인
     ./logs.sh

  3. 재시작 시도
     ./restart.sh

  4. 완전 재빌드
     ./rebuild.sh


================================================================================
5. 직접 Docker 명령어 사용
================================================================================

스크립트 대신 직접 명령어를 사용할 수도 있습니다:

# 시작
docker-compose up -d

# 중지
docker-compose down

# 재시작
docker-compose restart

# 상태 확인
docker-compose ps

# 로그 보기
docker-compose logs -f

# 특정 컨테이너 재시작
docker-compose restart library-nginx

# 빌드 없이 시작
docker-compose up -d --no-build

# 강제 재생성
docker-compose up -d --force-recreate


================================================================================
6. 문제 해결
================================================================================

❌ 권한 오류 (Linux/Mac)
   chmod +x *.sh

❌ Git pull 실패
   # SSH 키 확인
   ssh -T git@github.com
   
   # HTTPS 사용
   git pull https://github.com/Kontrack/library.git main

❌ 포트 충돌
   # docker-compose.yml에서 포트 변경
   ports:
     - "8081:80"  # 8080 대신 8081 사용

❌ Docker 데몬 오류
   # Docker Desktop 실행 확인
   docker ps

❌ MySQL 접속 안됨
   # 컨테이너 로그 확인
   ./logs.sh
   # 옵션 3 선택 (MySQL 로그)


================================================================================
7. 자주 사용하는 조합
================================================================================

# 빠른 재시작 (설정 변경 후)
./restart.sh && ./logs.sh

# 업데이트 후 상태 확인
./update.sh && ./health.sh

# 문제 확인
./health.sh && ./logs.sh


================================================================================
8. 프로덕션 배포 체크리스트
================================================================================

□ Git에서 최신 코드 받기
  git pull

□ 환경 변수 확인
  cat .env

□ 포트 충돌 확인
  netstat -tlnp | grep 8080

□ 백업 (필요시)
  docker-compose exec library-mysql mysqldump -u root -p library > backup.sql

□ 배포
  ./update.sh

□ 상태 확인
  ./health.sh

□ 로그 모니터링
  ./logs.sh (옵션 4 - 실시간)

□ HTTP 접속 테스트
  curl http://localhost:8080


================================================================================
9. 추가 팁
================================================================================

💡 백그라운드 로그 모니터링
   ./logs.sh &
   # 백그라운드에서 실행

💡 크론탭으로 자동 업데이트
   # crontab -e
   0 3 * * * cd /path/to/library && ./update.sh

💡 헬스체크 자동화
   # 10분마다 상태 확인
   */10 * * * * cd /path/to/library && ./health.sh >> health.log

💡 디스크 정리
   docker system prune -a
   docker volume prune


================================================================================
10. 접속 정보
================================================================================

웹 접속:
  개발:      http://localhost:8080
  프로덕션:  https://library.kontrack.kr

MySQL 접속:
  Host:      localhost
  Port:      3307
  Database:  library
  User:      root
  Password:  library2024 (기본값)


================================================================================
                           스크립트 가이드 끝
================================================================================

더 자세한 정보:
  - README.txt
  - README-DEPLOYMENT.txt
  - QUICKSTART.txt

================================================================================

