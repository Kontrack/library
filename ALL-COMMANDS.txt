================================================================================
                          모든 명령어 치트시트
================================================================================

📌 이 파일을 복사해서 터미널 옆에 두고 사용하세요!

================================================================================
🚀 관리 스크립트 (추천)
================================================================================

# 시작
./start.sh              # Linux/Mac
start.bat               # Windows

# 중지
./stop.sh               # Linux/Mac
stop.bat                # Windows

# 재시작
./restart.sh            # Linux/Mac
restart.bat             # Windows

# 재빌드
./rebuild.sh            # Linux/Mac
rebuild.bat             # Windows

# 업데이트 (Git pull + 재배포)
./update.sh             # Linux/Mac
update.bat              # Windows

# 상태 확인
./health.sh             # Linux/Mac
health.bat              # Windows

# 로그 확인
./logs.sh               # Linux/Mac
logs.bat                # Windows

# 배포 (대화형)
./deploy.sh             # Linux/Mac
deploy.bat              # Windows


================================================================================
🐳 Docker Compose 명령어
================================================================================

# 시작/중지/재시작
docker-compose up -d                  # 백그라운드 시작
docker-compose down                   # 중지 및 제거
docker-compose restart                # 재시작
docker-compose stop                   # 중지 (제거 안함)
docker-compose start                  # 시작 (기존 컨테이너)

# 상태 확인
docker-compose ps                     # 컨테이너 상태
docker-compose ps -a                  # 모든 컨테이너 (중지된 것 포함)
docker-compose top                    # 실행 중인 프로세스

# 로그
docker-compose logs                   # 전체 로그
docker-compose logs -f                # 실시간 로그
docker-compose logs --tail=50         # 최근 50줄
docker-compose logs library-nginx     # 특정 컨테이너
docker-compose logs -f library-mysql  # 실시간 (특정 컨테이너)

# 빌드
docker-compose build                  # 이미지 빌드
docker-compose build --no-cache       # 캐시 없이 빌드
docker-compose up -d --build          # 빌드 후 시작

# 특정 컨테이너만 조작
docker-compose restart library-nginx  # Nginx만 재시작
docker-compose stop library-mysql     # MySQL만 중지
docker-compose up -d library-nginx    # Nginx만 시작

# 실행 중인 컨테이너에 명령 실행
docker-compose exec library-nginx sh             # Nginx 컨테이너 쉘
docker-compose exec library-mysql mysql -uroot -p # MySQL 접속

# 정리
docker-compose down -v                # 볼륨까지 삭제
docker-compose down --rmi all         # 이미지까지 삭제


================================================================================
🗄️  MySQL 관련
================================================================================

# MySQL 컨테이너 접속
docker-compose exec library-mysql bash

# MySQL 클라이언트 접속
docker-compose exec library-mysql mysql -uroot -plibrary2024

# 데이터베이스 목록
docker-compose exec library-mysql mysql -uroot -plibrary2024 -e "SHOW DATABASES;"

# 특정 데이터베이스 사용
docker-compose exec library-mysql mysql -uroot -plibrary2024 library

# 백업
docker-compose exec library-mysql mysqldump -uroot -plibrary2024 library > backup.sql

# 복원
docker-compose exec -T library-mysql mysql -uroot -plibrary2024 library < backup.sql

# 외부에서 접속
mysql -h localhost -P 3307 -u root -plibrary2024


================================================================================
🌐 Nginx 관련
================================================================================

# Nginx 컨테이너 접속
docker-compose exec library-nginx sh

# 설정 테스트
docker-compose exec library-nginx nginx -t

# 설정 리로드
docker-compose exec library-nginx nginx -s reload

# 로그 확인
docker-compose exec library-nginx tail -f /var/log/nginx/access.log
docker-compose exec library-nginx tail -f /var/log/nginx/error.log

# HTTP 테스트
curl http://localhost:8080
curl -I http://localhost:8080          # 헤더만


================================================================================
🔍 Git 명령어
================================================================================

# 최신 코드 받기
git pull
git pull git@github.com:Kontrack/library.git main

# 상태 확인
git status
git log --oneline -5

# 변경사항 확인
git diff

# 커밋
git add .
git commit -m "메시지"
git push origin main

# 브랜치
git branch                    # 브랜치 목록
git checkout -b feature/new   # 새 브랜치 생성
git checkout main             # 브랜치 전환


================================================================================
💾 Docker 시스템 관리
================================================================================

# 시스템 정보
docker system df              # 디스크 사용량
docker system info            # 시스템 정보

# 정리
docker system prune           # 미사용 데이터 정리
docker system prune -a        # 모든 미사용 데이터
docker volume prune           # 미사용 볼륨 정리

# 이미지
docker images                 # 이미지 목록
docker rmi <image_id>         # 이미지 삭제

# 볼륨
docker volume ls              # 볼륨 목록
docker volume inspect <name>  # 볼륨 상세정보
docker volume rm <name>       # 볼륨 삭제

# 네트워크
docker network ls             # 네트워크 목록
docker network inspect <name> # 네트워크 상세정보


================================================================================
📊 모니터링
================================================================================

# 리소스 사용량
docker stats                              # 전체
docker stats $(docker-compose ps -q)      # 프로젝트만

# 실시간 로그 (색상 추가)
docker-compose logs -f --tail=100

# 프로세스 확인
docker-compose top

# 포트 확인
netstat -tlnp | grep 8080    # Linux
lsof -i :8080                # Mac
netstat -ano | findstr 8080  # Windows


================================================================================
🔧 문제 해결
================================================================================

# 모든 컨테이너 강제 중지
docker stop $(docker ps -aq)

# 모든 컨테이너 삭제
docker rm $(docker ps -aq)

# 특정 컨테이너 로그 (마지막 100줄)
docker-compose logs --tail=100 library-nginx

# 컨테이너 재생성
docker-compose up -d --force-recreate

# 캐시 없이 완전 재빌드
docker-compose build --no-cache --pull
docker-compose up -d

# Docker 완전 초기화 (주의!)
docker-compose down -v --rmi all
docker system prune -a --volumes


================================================================================
🎯 실전 활용 예시
================================================================================

# 매일 아침 시작 루틴
./start.sh && ./health.sh

# 코드 수정 후 즉시 반영
./restart.sh && curl http://localhost:8080

# GitHub 업데이트 후 배포
./update.sh && ./logs.sh

# 문제 발생 시 진단
./health.sh
./logs.sh
docker-compose ps
docker stats --no-stream

# 완전 재시작
./stop.sh && sleep 3 && ./start.sh

# 로그를 파일로 저장
docker-compose logs > system-$(date +%Y%m%d).log


================================================================================
⚡ 자주 사용하는 조합
================================================================================

# 재시작 후 로그 확인
./restart.sh && ./logs.sh

# 업데이트 후 상태 확인
./update.sh && ./health.sh

# 빌드 후 즉시 테스트
./rebuild.sh && curl http://localhost:8080

# 모든 로그를 한 번에
docker-compose logs --tail=50 library-nginx library-mysql


================================================================================
📱 유용한 Alias 설정
================================================================================

# ~/.bashrc 또는 ~/.zshrc에 추가

alias dps='docker-compose ps'
alias dup='docker-compose up -d'
alias ddown='docker-compose down'
alias dlogs='docker-compose logs -f'
alias drestart='docker-compose restart'
alias drebuild='docker-compose build --no-cache && docker-compose up -d'

# 사용 예시
dps        # docker-compose ps
dup        # docker-compose up -d
dlogs      # docker-compose logs -f


================================================================================
🔐 권한 관련 (Linux/Mac)
================================================================================

# 스크립트 실행 권한
chmod +x *.sh
chmod +x setup-permissions.sh

# 특정 파일만
chmod +x start.sh stop.sh restart.sh

# 자동 설정
./setup-permissions.sh


================================================================================
📞 빠른 접속 정보
================================================================================

웹:     http://localhost:8080
웹:     https://library.kontrack.kr

MySQL:  mysql -h localhost -P 3307 -u root -plibrary2024


================================================================================
                    명령어 모음 끝 - 즐거운 작업 되세요! 🎉
================================================================================

