================================================================================
                    도서관 관리 시스템 - 빠른 시작 가이드
================================================================================

┌──────────────────────────────────────────────────────────────────────────┐
│ 1단계: 환경 확인                                                          │
└──────────────────────────────────────────────────────────────────────────┘

□ Docker 설치 확인
  docker --version

□ Docker Compose 설치 확인
  docker-compose --version

□ Git 설치 확인 (선택)
  git --version


┌──────────────────────────────────────────────────────────────────────────┐
│ 2단계: 배포 방법 선택                                                     │
└──────────────────────────────────────────────────────────────────────────┘

╔═══════════════════════════════════════════════════════════════════════╗
║ 방법 A: 독립 Docker 실행 (테스트/개발용)                              ║
╚═══════════════════════════════════════════════════════════════════════╝

  1. 프로젝트 폴더로 이동
     cd /path/to/release

  2. Docker Compose 실행
     docker-compose up -d

  3. 브라우저에서 접속
     http://localhost:8080

  4. 종료 시
     docker-compose down


╔═══════════════════════════════════════════════════════════════════════╗
║ 방법 B: 기존 Nginx 통합 (프로덕션용)                                  ║
╚═══════════════════════════════════════════════════════════════════════╝

  1. 배포 스크립트 실행 권한 부여
     chmod +x deploy.sh

  2. 배포 스크립트 실행
     ./deploy.sh
     → 옵션 2번 선택

  3. 또는 수동 배포:
     
     a) 파일 복사
        sudo mkdir -p /usr/share/nginx/html/library
        sudo cp -r public/* /usr/share/nginx/html/library/

     b) Nginx 설정 추가
        sudo nano /etc/nginx/nginx.conf
        (nginx-library-config.txt 내용 추가)

     c) SSL 인증서 발급 (아직 없는 경우)
        sudo certbot certonly --nginx -d library.kontrack.kr

     d) Nginx 테스트 및 재시작
        sudo nginx -t
        sudo systemctl reload nginx

  4. 브라우저에서 접속
     https://library.kontrack.kr


┌──────────────────────────────────────────────────────────────────────────┐
│ 3단계: 기능 테스트                                                        │
└──────────────────────────────────────────────────────────────────────────┘

  1. 로그인 페이지 접속
     - 아무 값이나 입력하고 로그인 (백엔드 미구현)
     - 또는 빈 값으로 로그인 버튼 클릭

  2. 메인 페이지 탐색
     ✓ 홈: 통계 및 최근 도서
     ✓ 서적 목록: 전체 서적 검색 및 정렬
     ✓ 인기 도서: 대출 순위 차트
     ✓ 내 대출: 대출 현황 및 이력
     ✓ 관리 (관리자만): 서적/카테고리/회원 관리

  3. 회원가입 테스트
     - 일반 사용자 / 관리자 선택
     - 관리자는 10자리 학번 필요


┌──────────────────────────────────────────────────────────────────────────┐
│ 4단계: 데이터베이스 설정 (선택사항)                                       │
└──────────────────────────────────────────────────────────────────────────┘

  MySQL이 필요한 경우:

  1. MySQL만 실행
     docker-compose up -d library-mysql

  2. 접속 정보
     Host:     localhost
     Port:     3307
     Database: library
     User:     root
     Password: library2024 (기본값)

  3. 클라이언트로 접속
     mysql -h localhost -P 3307 -u root -p


┌──────────────────────────────────────────────────────────────────────────┐
│ 문제 해결                                                                 │
└──────────────────────────────────────────────────────────────────────────┘

❌ 포트 충돌 (8080이 이미 사용 중)
   → docker-compose.yml에서 포트 변경
      ports:
        - "8081:80"

❌ Nginx 설정 오류
   → 설정 테스트
      sudo nginx -t
   → 로그 확인
      sudo tail -f /var/log/nginx/error.log

❌ Docker 컨테이너가 시작되지 않음
   → 로그 확인
      docker-compose logs library-nginx
      docker-compose logs library-mysql
   → 재시작
      docker-compose restart

❌ SSL 인증서 오류
   → 인증서 경로 확인
      ls -la /etc/letsencrypt/live/library.kontrack.kr/
   → certbot으로 재발급
      sudo certbot renew


┌──────────────────────────────────────────────────────────────────────────┐
│ 유용한 명령어                                                             │
└──────────────────────────────────────────────────────────────────────────┘

# Docker 관련
docker-compose ps              # 컨테이너 상태 확인
docker-compose logs -f         # 실시간 로그 보기
docker-compose restart         # 재시작
docker-compose down            # 중지 및 삭제
docker-compose up -d           # 백그라운드 실행

# Nginx 관련
sudo nginx -t                  # 설정 테스트
sudo systemctl status nginx    # 상태 확인
sudo systemctl reload nginx    # 재시작
sudo systemctl restart nginx   # 완전 재시작

# MySQL 관련
docker-compose exec library-mysql mysql -uroot -p  # MySQL 접속
docker-compose logs library-mysql                   # MySQL 로그


┌──────────────────────────────────────────────────────────────────────────┐
│ 다음 단계                                                                 │
└──────────────────────────────────────────────────────────────────────────┘

  ☐ 데이터베이스 스키마 설계 (Assignment #2-1)
  ☐ 백엔드 API 개발 (Assignment #2-2)
  ☐ 프론트엔드-백엔드 연동
  ☐ 실제 인증 기능 구현
  ☐ 도서 CRUD 기능 구현
  ☐ 대출/반납 로직 구현


┌──────────────────────────────────────────────────────────────────────────┐
│ 추가 정보                                                                 │
└──────────────────────────────────────────────────────────────────────────┘

  📄 상세 배포 가이드:    README-DEPLOYMENT.txt
  📄 프로젝트 README:     README.txt
  📄 Nginx 통합 설정:     nginx-library-config.txt
  📄 GitHub 가이드:       GitHub사용가이드.md
  🚀 배포 스크립트:       ./deploy.sh


================================================================================
                                즐거운 개발 되세요! 🚀
================================================================================

